# database.py
import os
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# --- Database Setup ---
DATABASE_URL = os.getenv("DATABASE_URL") # e.g., "postgresql://user:password@host:port/dbname"
if not DATABASE_URL:
    raise ValueError("DATABASE_URL environment variable is not set.")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# --- ORM Table Definitions ---

class Document(Base):
    """
    Table to store metadata about each processed document.
    This acts as our cache and source of truth.
    """
    __tablename__ = "documents"
    id = Column(Integer, primary_key=True, index=True)
    document_url = Column(String, unique=True, index=True, nullable=False)
    # The KEY link: This connects our SQL record to the Pinecone index
    pinecone_index_name = Column(String, unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    status = Column(String, default="processed")

    # This creates a one-to-many relationship with the answer logs
    answer_logs = relationship("AnswerLog", back_populates="document")

class AnswerLog(Base):
    """Table to audit every question and answer generated by the system."""
    __tablename__ = "answer_logs"
    id = Column(Integer, primary_key=True, index=True)
    # This links the log back to a specific document
    document_id = Column(Integer, ForeignKey("documents.id"), nullable=False)
    question = Column(Text, nullable=False)
    answer = Column(Text, nullable=False)
    context_used = Column(Text) # Storing the context is useful for debugging
    timestamp = Column(DateTime, default=datetime.utcnow)

    document = relationship("Document", back_populates="answer_logs")

# --- Database Initialization ---
def create_db_and_tables():
    """Initializes the database and creates tables if they don't exist."""
    print("Initializing database and creating tables...")
    Base.metadata.create_all(bind=engine)
    print("Database ready.")

# --- Dependency for FastAPI ---
def get_db():
    """FastAPI dependency to get a DB session for a request."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()